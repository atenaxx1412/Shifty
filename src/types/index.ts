export type UserRole = 'root' | 'manager' | 'staff';

export interface User {
  uid: string; // 内部ID（データベース用）
  userId: string; // ログイン用ID（ユーザーが使用）
  password: string; // ログイン用パスワード
  name: string; // 氏名
  role: UserRole;
  managerId?: string; // 店長のUID（staffの場合のみ使用）
  shopId?: string; // 店舗ID（managerとstaffの場合に使用）
  
  // 店長の場合の店舗情報
  shopName?: string; // 店舗名（managerの場合）
  shopAddress?: string; // 住所（managerの場合）
  shopPhone?: string; // 電話番号（managerの場合）
  shopEmail?: string; // 店舗メール（managerの場合）
  
  // スタッフ詳細情報（任意入力）
  nameKana?: string; // フリガナ
  displayName?: string; // 表記名
  position?: string; // 役職・職種
  transportationCost?: number; // 交通費（日当）
  fixedShift?: string; // 固定シフト情報（例：月水金 9-17時）
  gender?: 'male' | 'female' | 'other' | 'not_specified'; // 性別
  
  employmentType?: 'full-time' | 'part-time' | 'contract';
  skills?: string[];
  hourlyRate?: number;
  maxHoursPerWeek?: number;
  availability?: {
    [day: string]: {
      available: boolean;
      timeSlots?: { start: string; end: string }[];
    };
  };
  createdAt: Date;
  updatedAt: Date;
}

// Shop interface removed - store info now in manager User type

export interface Shift {
  shiftId: string;
  managerId: string; // 店長のUID
  date: Date;
  slots: ShiftSlot[];
  status: 'draft' | 'published' | 'completed';
  createdBy: string;
  createdAt: Date;
  updatedAt: Date;
}

export interface ShiftExtended extends Shift {
  metadata: {
    totalRequiredStaff: number;
    totalAssignedStaff: number;
    estimatedCost: number;
    complexity: 'simple' | 'moderate' | 'complex';
    autogeneratedSlots: number;
  };
  approvalWorkflow: {
    submittedBy: string;
    submittedAt: Date;
    approvedBy?: string;
    approvedAt?: Date;
    rejectedBy?: string;
    rejectedAt?: Date;
    rejectionReason?: string;
    lastModifiedBy: string;
    modificationHistory: ModificationRecord[];
  };
  analytics: {
    actualCost?: number;
    efficiencyScore?: number;
    staffSatisfactionScore?: number;
    lateChanges: number;
    noShows: number;
  };
  realTimeSync: {
    lastSyncAt: Date;
    version: number;
    conflicts: ConflictRecord[];
  };
}

export interface ModificationRecord {
  modifiedBy: string;
  modifiedAt: Date;
  changes: Record<string, { before: unknown; after: unknown }>;
  reason?: string;
}

export interface ConflictRecord {
  conflictId: string;
  type: 'concurrent_edit' | 'data_mismatch' | 'permission_change';
  description: string;
  affectedFields: string[];
  resolvedAt?: Date;
  resolvedBy?: string;
  resolutionMethod?: 'automatic' | 'manual' | 'escalated';
}

export interface ShiftSlot {
  slotId: string;
  startTime: string;
  endTime: string;
  requiredStaff: number;
  assignedStaff: string[]; // User UIDs
  positions?: string[];
  requiredSkills?: string[];
  priority: 'low' | 'medium' | 'high' | 'critical';
  estimatedDuration: number; // minutes
}

export interface ShiftPattern {
  patternId: string;
  managerId: string; // 店長のUID
  name: string;
  description?: string;
  template: {
    dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6; // 0=Sunday
    timeSlots: ShiftSlotTemplate[];
    requiredSkills: string[];
    minimumStaff: number;
    preferredStaff: number;
  };
  seasonality: {
    applicableMonths: number[]; // 1-12
    holidayAdjustments: HolidayAdjustment[];
  };
  analytics: {
    usageCount: number;
    successRate: number;
    averageCost: number;
    lastUsed: Date;
  };
  isActive: boolean;
  createdBy: string;
  createdAt: Date;
  updatedAt: Date;
}

export interface ShiftSlotTemplate {
  startTime: string;
  endTime: string;
  requiredStaff: number;
  positions: string[];
  requiredSkills: string[];
  priority: 'low' | 'medium' | 'high' | 'critical';
}

export interface HolidayAdjustment {
  holidayType: 'national' | 'regional' | 'company';
  staffMultiplier: number; // e.g., 1.5 for holiday pay
  requiredStaffMultiplier: number; // e.g., 0.8 for reduced operations
}

export interface ShiftRequest {
  requestId: string;
  userId: string;
  shiftId: string;
  date: Date;
  preference: 'preferred' | 'available' | 'unavailable';
  timeSlots?: { start: string; end: string }[];
  note?: string;
  status: 'pending' | 'approved' | 'rejected';
  createdAt: Date;
  updatedAt: Date;
}

export interface ShiftRequestEnhanced extends ShiftRequest {
  priority: 'low' | 'medium' | 'high' | 'urgent';
  conflictsWith: string[]; // 他リクエストとの競合
  aiRecommendation: {
    score: number; // 0-1
    reasoning: string;
    alternativeSlots: ShiftSlotSuggestion[];
  };
  exchangeOpportunities: {
    availableExchanges: string[]; // Exchange IDs
    potentialPartners: string[]; // User IDs
  };
  workflow: {
    autoApprovalEligible: boolean;
    requiresManagerReview: boolean;
    escalationLevel: number;
  };
  metadata: {
    submissionMethod: 'web' | 'mobile' | 'auto' | 'manager_assigned';
    deviceInfo?: string;
    locationSubmitted?: string;
    responseTime?: number; // seconds
  };
}

export interface ShiftSlotSuggestion {
  slotId: string;
  startTime: string;
  endTime: string;
  matchScore: number; // 0-1
  reason: string;
  tradeoffs: string[];
}

export interface ShiftExchange {
  exchangeId: string;
  fromUserId: string;
  toUserId?: string;
  shiftId: string;
  shiftSlotId: string;
  reason?: string;
  status: 'pending' | 'approved' | 'rejected' | 'cancelled';
  approvedBy?: string;
  createdAt: Date;
  updatedAt: Date;
}

// ========== MONTHLY SHIFT REQUEST TYPES ==========

export interface DayShiftRequest {
  date: Date;
  timeSlots: { start: string; end: string }[];
  preference: 'preferred' | 'available' | 'unavailable';
  positions?: string[];
  note?: string;
}

export interface MonthlyShiftRequest {
  monthlyRequestId: string;
  staffId: string;
  managerId: string;
  targetMonth: string; // YYYY-MM format
  title: string;
  dayRequests: DayShiftRequest[];
  overallNote?: string;
  status: 'draft' | 'submitted' | 'under_review' | 'approved' | 'partially_approved' | 'rejected';
  submittedAt?: Date;
  reviewedAt?: Date;
  reviewedBy?: string;
  reviewNotes?: string;
  createdAt: Date;
  updatedAt: Date;
}

export interface MonthlyShiftRequestWithStaff extends MonthlyShiftRequest {
  staffName: string;
  staffEmail?: string;
}

export interface Notification {
  notificationId: string;
  userId: string;
  type: 'shift_assigned' | 'shift_changed' | 'exchange_request' | 'exchange_response' | 'reminder' | 'announcement';
  title: string;
  message: string;
  data?: Record<string, unknown>;
  read: boolean;
  createdAt: Date;
}

// ========== CHAT SYSTEM TYPES ==========

export interface ChatMessage {
  messageId: string;
  chatRoomId: string;
  senderId: string;
  senderName: string;
  senderRole: UserRole;
  message: string;
  messageType: 'text' | 'system' | 'shift_related' | 'file' | 'image';
  relatedShiftId?: string;
  relatedData?: Record<string, unknown>;
  isRead: boolean;
  readBy: string[]; // User IDs who have read this message
  createdAt: Date;
  updatedAt: Date;
}

export interface ChatRoom {
  chatRoomId: string;
  managerId: string; // 店長のUID
  roomType: 'direct' | 'group' | 'shift_discussion' | 'general';
  participants: string[]; // User IDs
  participantNames: Record<string, string>; // userId -> name mapping
  participantRoles: Record<string, UserRole>; // userId -> role mapping
  title?: string;
  description?: string;
  relatedShiftId?: string;
  lastMessage?: string;
  lastMessageTime?: Date;
  lastMessageSender?: string;
  unreadCount: Record<string, number>; // userId -> unread count
  isActive: boolean;
  createdBy: string;
  createdAt: Date;
  updatedAt: Date;
}

export interface ChatNotification {
  notificationId: string;
  userId: string;
  chatRoomId: string;
  messageId: string;
  senderName: string;
  message: string;
  isRead: boolean;
  createdAt: Date;
}

// ========== ATTENDANCE TRACKING TYPES ==========

export interface AttendanceRecord {
  recordId: string;
  userId: string;
  managerId: string; // 店長のUID
  shiftId?: string; // 関連するシフトID（ある場合）
  date: Date;
  clockInTime?: Date;
  clockOutTime?: Date;
  status: 'clocked_in' | 'clocked_out' | 'break' | 'absent';
  location?: {
    latitude: number;
    longitude: number;
    accuracy?: number;
    timestamp: Date;
  };
  notes?: string;
  totalWorkTime?: number; // 実際の労働時間（分）
  breakTime?: number; // 休憩時間（分）
  overtimeMinutes?: number; // 残業時間（分）
  createdAt: Date;
  updatedAt: Date;
}

export interface AttendanceStatus {
  userId: string;
  isWorking: boolean;
  currentRecordId?: string;
  clockInTime?: Date;
  workDuration?: number; // 現在の勤務時間（分）
  lastActivity: Date;
  currentShiftId?: string;
}

export interface AttendanceSummary {
  userId: string;
  period: {
    start: Date;
    end: Date;
  };
  totalWorkDays: number;
  totalWorkTime: number; // 分
  totalOvertimeMinutes: number;
  averageWorkTimePerDay: number;
  attendanceRate: number; // 出勤率（%）
  lateCount: number; // 遅刻回数
  earlyLeaveCount: number; // 早退回数
  records: AttendanceRecord[];
}

// ========== BUDGET MANAGEMENT TYPES ==========

export interface BudgetCalculation {
  calculationId: string;
  managerId: string; // 店長のUID
  period: {
    start: Date;
    end: Date;
    name: string; // e.g., "2025年3月"
  };
  shifts: ShiftBudgetItem[];
  staffCosts: StaffCostItem[];
  summary: {
    totalShifts: number;
    totalHours: number;
    totalBaseCost: number; // 基本給
    totalOvertimeCost: number; // 残業代
    totalBonusCost: number; // 手当
    totalTaxAndInsurance: number; // 税金・保険
    totalCost: number; // 総人件費
    budgetLimit?: number; // 予算上限
    budgetVariance: number; // 予算差額
  };
  projectedOverrun?: number; // 予算超過予想
  assumptions: {
    baseHourlyRate: Record<string, number>; // userId -> hourly rate
    overtimeMultiplier: number; // 残業倍率 (e.g., 1.25)
    nightShiftBonus: number; // 深夜手当
    holidayBonus: number; // 休日手当
    socialInsuranceRate: number; // 社会保険料率
    taxRate: number; // 税率
  };
  createdBy: string;
  createdAt: Date;
  updatedAt: Date;
}

export interface ShiftBudgetItem {
  shiftId: string;
  date: Date;
  dayType: 'weekday' | 'weekend' | 'holiday';
  slots: SlotBudgetItem[];
  dailyTotal: number;
}

export interface SlotBudgetItem {
  slotId: string;
  startTime: string;
  endTime: string;
  duration: number; // minutes
  assignedStaff: StaffAssignment[];
  slotTotal: number;
  isNightShift: boolean;
  isOvertime: boolean;
}

export interface StaffAssignment {
  userId: string;
  userName: string;
  hourlyRate: number;
  baseCost: number;
  overtimeCost: number;
  bonuses: number;
  totalCost: number;
  workDuration: number; // minutes
}

export interface StaffCostItem {
  userId: string;
  userName: string;
  totalHours: number;
  basePay: number;
  overtimePay: number;
  nightShiftBonus: number;
  holidayBonus: number;
  grossPay: number;
  socialInsurance: number;
  tax: number;
  totalCost: number; // 会社負担の総額
}

export interface BudgetTemplate {
  templateId: string;
  managerId: string; // 店長のUID
  name: string;
  description?: string;
  staffRates: Record<string, number>; // userId -> hourly rate
  multipliers: {
    overtime: number;
    nightShift: number;
    weekend: number;
    holiday: number;
  };
  companyRates: {
    socialInsurance: number;
    unemploymentInsurance: number;
    workersCompensation: number;
  };
  isDefault: boolean;
  createdBy: string;
  createdAt: Date;
  updatedAt: Date;
}

// ========== SHIFT GENERATION ENGINE TYPES ==========

export interface ShiftGenerationRequirements {
  businessHours?: { start: string; end: string };
  slotDuration?: number; // minutes
  minimumStaffPerSlot?: number;
  maximumStaffPerSlot?: number;
  requiredSkills?: string[];
  budgetLimit?: number;
  specialRequirements?: string[];
  optimizationStrategy?: 'cost' | 'quality' | 'balanced' | 'fairness';
  priorityWeights?: {
    skillMatch: number;
    availability: number;
    experience: number;
    cost: number;
    fairness: number;
  };
}

export interface ShiftConstraints {
  businessHours: { start: string; end: string };
  minimumStaffPerSlot: number;
  maximumStaffPerSlot: number;
  requiredSkills: string[];
  budgetLimit?: number;
  specialRequirements: string[];
  dayOfWeekConstraints: Record<number, unknown>;
  legalConstraints: {
    maxConsecutiveHours: number;
    minBreakTime: number;
    maxWeeklyHours: number;
  };
  historicalData: Record<string, unknown>;
}

export interface StaffAvailabilityMatrix {
  date: Date;
  staffAvailability: Map<string, Record<string, unknown>>;
  skillMatrix: Map<string, string[]>;
  preferenceScores: Map<string, number>;
  conflictIndicators: Map<string, number>;
}

export interface OptimizedSlot {
  slotId: string;
  startTime: string;
  endTime: string;
  requiredStaff: number;
  assignedStaff: string[];
  requiredSkills?: string[];
  priority: 'low' | 'medium' | 'high' | 'critical';
  estimatedDuration: number;
  optimizationMetrics: {
    totalScore: number;
    skillCoverage: number;
    costEfficiency: number;
    staffSatisfaction: number;
  };
}

export type TimeSlotTemplate = ShiftSlotTemplate;

export interface GenerationMetrics {
  algorithmVersion: string;
  optimizationStrategy: string;
  totalOptimizationTime: number;
  qualityScore: number;
  aiRecommendations: {
    slotId: string;
    confidence: number;
    alternatives: Array<Record<string, unknown>>;
  }[];
}

// ShiftExtendedに追加のプロパティを定義
declare module './index' {
  interface ShiftExtended {
    generationMetrics?: GenerationMetrics;
  }
}